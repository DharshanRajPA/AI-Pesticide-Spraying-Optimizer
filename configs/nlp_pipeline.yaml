# NLP Pipeline Configuration for AgriSprayAI
# Defines ASR, NLP, and GPT-3 integration settings

# Whisper ASR Configuration
whisper:
  model_size: "base"  # tiny, base, small, medium, large
  device: "auto"  # auto, cpu, cuda, mps
  language: null  # null for auto-detection, or specific language code
  
  # Audio processing
  audio:
    sample_rate: 16000
    max_duration: 30  # seconds
    supported_formats: ["wav", "mp3", "m4a", "flac", "ogg"]
    
  # Transcription settings
  transcription:
    word_timestamps: true
    verbose: false
    temperature: 0.0
    compression_ratio_threshold: 2.4
    logprob_threshold: -1.0
    no_speech_threshold: 0.6

# Google Gemini Configuration
gemini:
  model: "gemini-1.5-flash"  # gemini-1.5-flash, gemini-1.5-pro, gemini-1.0-pro
  temperature: 0.1  # Low temperature for consistent outputs
  max_output_tokens: 500
  top_p: 0.8
  top_k: 40
  
  # Rate limiting
  rate_limit:
    requests_per_minute: 60
    tokens_per_minute: 150000
    
  # Prompt templates
  prompts:
    symptom_extraction: |
      You are an agricultural expert specializing in pest and disease identification. 
      Your task is to extract structured information from farmer notes about crop conditions.
      
      Respond with a JSON object containing:
      - "symptoms": List of specific symptoms mentioned (e.g., "yellowing leaves", "brown spots")
      - "likely_causes": List of potential pest/disease causes (e.g., "aphid infestation", "fungal infection")
      - "severity_indicators": List of words/phrases indicating severity (e.g., "severe", "widespread", "mild")
      - "clarifying_questions": List of questions to ask for more information
      
      Be precise and focus on agricultural terminology. If no relevant information is found, return empty lists.
    
    rationale_generation: |
      You are an agricultural expert providing clear, actionable advice to farmers.
      Based on the symptoms and vision model confidence, provide a brief 2-3 sentence 
      explanation of the pest/disease assessment and recommended action.
      Keep it simple and actionable for farmers.

# Text Embedding Configuration
text_embedder:
  model_name: "sentence-transformers/all-MiniLM-L6-v2"
  max_seq_length: 256
  normalize_embeddings: true
  
  # Alternative models for different use cases
  alternatives:
    multilingual: "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
    domain_specific: "sentence-transformers/all-mpnet-base-v2"
    fast: "sentence-transformers/all-MiniLM-L6-v2"

# Symptom Extraction Configuration
symptom_extraction:
  # Agricultural symptom categories
  categories:
    visual_symptoms:
      - "yellowing"
      - "browning"
      - "wilting"
      - "spots"
      - "holes"
      - "discoloration"
      - "stunted"
      - "deformed"
      - "drooping"
      - "curling"
      - "necrosis"
    
    pest_indicators:
      - "aphid"
      - "beetle"
      - "worm"
      - "mite"
      - "caterpillar"
      - "larvae"
      - "eggs"
      - "webs"
      - "tunnels"
    
    disease_indicators:
      - "fungus"
      - "bacteria"
      - "virus"
      - "infection"
      - "blight"
      - "rot"
      - "mold"
      - "powdery"
      - "rust"
    
    severity_indicators:
      - "severe"
      - "mild"
      - "moderate"
      - "widespread"
      - "localized"
      - "extensive"
      - "heavy"
      - "light"
      - "significant"
      - "minor"
      - "beginning"
      - "advanced"

# Validation Configuration
validation:
  # Confidence thresholds
  confidence_thresholds:
    high: 0.8
    medium: 0.6
    low: 0.4
  
  # Validation rules
  rules:
    max_confidence_diff: 0.3  # Max difference between text and vision confidence
    min_text_length: 10  # Minimum text length for processing
    max_text_length: 1000  # Maximum text length for processing

# Logging Configuration
logging:
  log_dir: "logs/nlp_pipeline"
  log_level: "INFO"
  
  # Log specific components
  components:
    whisper: true
    gpt3: true
    text_embedder: true
    symptom_extraction: true
  
  # Performance monitoring
  performance:
    log_processing_times: true
    log_token_usage: true
    log_api_calls: true

# Error Handling Configuration
error_handling:
  # Retry settings
  retry:
    max_attempts: 3
    backoff_factor: 2.0
    timeout: 30.0
  
  # Fallback behavior
  fallback:
    use_keyword_extraction: true
    use_simple_embedding: true
    return_empty_on_failure: false
  
  # Rate limiting
  rate_limiting:
    enabled: true
    requests_per_minute: 60
    burst_size: 10

# Security Configuration
security:
  # API key management
  api_keys:
    openai: "${OPENAI_API_KEY}"  # From environment variable
    kaggle: "${KAGGLE_API_KEY}"  # From environment variable
  
  # Data privacy
  privacy:
    anonymize_logs: true
    remove_pii: true
    data_retention_days: 90
  
  # Content filtering
  content_filtering:
    enabled: true
    filter_inappropriate: true
    max_content_length: 10000

# Performance Configuration
performance:
  # Caching
  caching:
    enabled: true
    cache_embeddings: true
    cache_transcriptions: true
    cache_duration: 3600  # seconds
  
  # Batch processing
  batch_processing:
    enabled: true
    batch_size: 32
    max_batch_wait: 5.0  # seconds
  
  # Memory management
  memory:
    max_memory_usage: 0.8  # 80% of available memory
    cleanup_interval: 300  # seconds

# Monitoring Configuration
monitoring:
  # Metrics collection
  metrics:
    enabled: true
    collect_processing_times: true
    collect_accuracy_metrics: true
    collect_error_rates: true
  
  # Alerts
  alerts:
    high_error_rate: 0.1  # 10% error rate threshold
    slow_processing: 10.0  # 10 seconds processing time threshold
    api_quota_exceeded: 0.9  # 90% quota usage threshold
