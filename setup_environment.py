#!/usr/bin/env python3
"""
Environment setup script for AgriSprayAI.
Helps users configure their .env file with proper values.
"""

import os
import secrets
import string
from pathlib import Path

def generate_secret_key(length=32):
    """Generate a secure random secret key."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def get_user_input(prompt, default=None, required=True):
    """Get user input with optional default value."""
    while True:
        if default:
            user_input = input(f"{prompt} (default: {default}): ").strip()
            if not user_input:
                return default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if user_input or not required:
            return user_input
        print("‚ùå This field is required. Please enter a value.")

def setup_environment():
    """Interactive environment setup."""
    print("üå± AgriSprayAI Environment Setup")
    print("=" * 40)
    print("This script will help you set up your .env file with proper values.")
    print()
    
    # Check if .env already exists
    env_file = Path('.env')
    if env_file.exists():
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    print("üìù Let's set up your environment variables...")
    print()
    
    # API Keys (Required)
    print("üîë API Keys (Required):")
    print("You'll need to get these from the respective services.")
    print()
    
    gemini_key = get_user_input(
        "Enter your Google Gemini API key",
        required=True
    )
    
    kaggle_key = get_user_input(
        "Enter your Kaggle API key", 
        required=True
    )
    
    # Optional API Keys
    print("\nüåê Optional API Keys (Press Enter to skip):")
    weather_key = get_user_input(
        "Enter your Weather API key (optional)",
        required=False
    )
    
    maps_key = get_user_input(
        "Enter your Maps API key (optional)",
        required=False
    )
    
    # Security Keys (Auto-generated)
    print("\nüîê Security Keys (Auto-generating secure values):")
    secret_key = generate_secret_key(32)
    jwt_secret = generate_secret_key(32)
    encryption_key = generate_secret_key(32)
    
    print(f"‚úÖ Generated secret key: {secret_key[:8]}...")
    print(f"‚úÖ Generated JWT secret: {jwt_secret[:8]}...")
    print(f"‚úÖ Generated encryption key: {encryption_key[:8]}...")
    
    # Database Configuration
    print("\nüóÑÔ∏è  Database Configuration:")
    db_url = get_user_input(
        "Database URL",
        default="postgresql://agrispray:password@localhost:5432/agrispray",
        required=False
    )
    
    redis_url = get_user_input(
        "Redis URL",
        default="redis://localhost:6379/0",
        required=False
    )
    
    # Server Configuration
    print("\nüñ•Ô∏è  Server Configuration:")
    api_host = get_user_input(
        "API Host",
        default="0.0.0.0",
        required=False
    )
    
    api_port = get_user_input(
        "API Port",
        default="8000",
        required=False
    )
    
    # Development Mode
    print("\nüõ†Ô∏è  Development Settings:")
    debug = get_user_input(
        "Enable debug mode? (y/N)",
        default="y",
        required=False
    ).lower() == 'y'
    
    # Create .env content
    env_content = f"""# AgriSprayAI Environment Configuration
# Generated by setup_environment.py

# API Keys
GEMINI_API_KEY={gemini_key}
KAGGLE_API_KEY={kaggle_key}

# Database Configuration
DATABASE_URL={db_url}
REDIS_URL={redis_url}

# Server Configuration
API_HOST={api_host}
API_PORT={api_port}
API_WORKERS=4

# Security
SECRET_KEY={secret_key}
JWT_SECRET={jwt_secret}
ENCRYPTION_KEY={encryption_key}

# Logging
LOG_LEVEL=INFO
LOG_DIR=logs

# Model Paths
VISION_MODEL_PATH=models/yolov8_baseline/weights/best.pt
FUSION_MODEL_PATH=models/fusion_best.pt
SEGMENTATION_MODEL_PATH=models/segmentation_best.pt

# File Upload
MAX_FILE_SIZE=52428800  # 50MB
UPLOAD_DIR=uploads
ALLOWED_EXTENSIONS=jpg,jpeg,png,tiff,bmp

# Monitoring
MLFLOW_TRACKING_URI=http://localhost:5000
WANDB_PROJECT=agrispray-ai
PROMETHEUS_PORT=9090

# Development
DEBUG={str(debug).lower()}
RELOAD=true
TEST_MODE=false

# Production
PRODUCTION=false
SSL_CERT_PATH=
SSL_KEY_PATH=

# Edge Deployment
EDGE_DEVICE=cpu  # jetson, coral, cpu
TENSORRT_ENGINE_PATH=models/tensorrt_engine.trt
ONNX_MODEL_PATH=models/model.onnx

# External Services
WEATHER_API_KEY={weather_key or 'your_weather_api_key'}
MAPS_API_KEY={maps_key or 'your_maps_api_key'}

# Rate Limiting
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST_SIZE=10

# Data Privacy
ANONYMIZE_LOGS=true
DATA_RETENTION_DAYS=90
GDPR_COMPLIANCE=true

# Performance
CACHE_TTL=3600
BATCH_SIZE=32
MAX_MEMORY_USAGE=0.8

# UAV Configuration
MAVLINK_CONNECTION=udp:127.0.0.1:14550
DJI_SDK_ENABLED=false
DJI_APP_KEY=your_dji_app_key

# Regulatory
MAX_DOSE_PER_PLANT=50
MAX_TOTAL_DOSE=1000
TARGET_CURE_PROBABILITY=0.85
CONFIDENCE_THRESHOLD=0.80
"""
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("\n‚úÖ Environment setup complete!")
    print("üìÑ Created .env file with your configuration")
    print()
    print("üîë Important: Keep your .env file secure and never commit it to version control!")
    print("üìñ The .env file is already included in .gitignore")
    print()
    print("üöÄ Next steps:")
    print("1. Verify your API keys are working")
    print("2. Run: python start_project.py")
    print("3. Or run: docker-compose up --build")

def main():
    """Main function."""
    try:
        setup_environment()
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        print("Please check your inputs and try again.")

if __name__ == "__main__":
    main()
